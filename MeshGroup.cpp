// MeshGroup.cpp: implementation of the MeshGroup class.
//
//////////////////////////////////////////////////////////////////////

#include "MeshGroup.h"
#include <string>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

MeshGroup::MeshGroup(const char* name)
{
	Name(name);
	this->currentMesh = 0;
}

MeshGroup::~MeshGroup()
{
	ClearMeshes();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void MeshGroup::ClearMeshes()
{
	for (int i = 0; i < this->meshes.Size(); i++)
		delete this->meshes.Get(i);

	this->meshes.Clear();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
const char* MeshGroup::Name()
{
	return this->name;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void MeshGroup::Name(const char* name)
{
	strcpy(this->name, name);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void MeshGroup::AddMesh(Mesh* mesh)
{
	if (this->meshes.Add(mesh) >= 0)
		this->currentMesh = mesh;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool MeshGroup::RemoveMesh(const char* mesh)
{
	int i = GetMeshIndex(mesh);
	
	if (i > -1)
	{
		this->meshes.Remove(i);
	}
	return false;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Mesh* MeshGroup::GetMesh(const char* mesh)
{
	int i = GetMeshIndex(mesh);

	if (i > -1)
		return this->meshes[i];

	return 0;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int MeshGroup::GetMeshIndex(const char* mesh)
{
	if (mesh)
	{
		for (int i = 0; i < this->meshes.Size(); i++)
		{
			if (strcmp(this->meshes[i]->Name(), mesh) == 0)
			{
				return i;
			}
		}
	}
	return -1;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int MeshGroup::GetMeshCount()
{
	return this->meshes.Size();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Mesh* MeshGroup::GetMesh(int index)
{
	return this->meshes[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void MeshGroup::SetCurrentMesh(int index)
{
	if (index >= 0 && index < this->meshes.Size())
	{
		this->currentMesh = this->meshes[index];
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void MeshGroup::SetCurrentMesh(const char* mesh)
{
	int index = GetMeshIndex(mesh);
	if (index >= 0)
		this->currentMesh = this->meshes[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Mesh* MeshGroup::GetCurrentMesh()
{
	return this->currentMesh;
}
