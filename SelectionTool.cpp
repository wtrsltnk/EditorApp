// SelectionTool.cpp: implementation of the SelectionTool class.
//
//////////////////////////////////////////////////////////////////////

#include "SelectionTool.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

SelectionTool::SelectionTool()
{
	this->toolArgs = 0;
	this->propertieBox.Initialize(200, 456);
}

SelectionTool::~SelectionTool()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnLDown(int keys, int x, int y)
{
	if (this->toolArgs)
	{
		this->toolArgs->Doc()->Select(x, y, 1, 1);
		this->toolArgs->Doc()->Render();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnLUp(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnRDown(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnRUp(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnMDown(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnMUp(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::OnMouseMove(int keys, int x, int y)
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void SelectionTool::UpdateTool()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool SelectionTool::Load(ToolArgs* args)
{
	this->toolArgs = args;
	args->Views()->Add(&this->propertieBox);
	return true;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool SelectionTool::Unload()
{
	return true;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
const char* SelectionTool::GetName()
{
	return SELECTION_TOOL;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
CWToolBox* SelectionTool::GetPropertieBox()
{
	return &this->propertieBox;
}
