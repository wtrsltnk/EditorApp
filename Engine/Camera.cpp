// Camera.cpp: implementation of the Camera class.
//
//////////////////////////////////////////////////////////////////////

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include "Camera.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Camera::Camera()
{
	this->cameraType = CameraTypePerspective;
	Reset();
}

Camera::~Camera()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::Reset()
{
	this->viewMatrix.FillIndenity();
	this->position.Fill(0.0f, 0.0f, 0.0f);

	this->zoom = 2.0f;

	this->pitch = 0.0f;
	this->roll = 0.0f;
	this->yaw = 0.0f;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::BuildViewmatrix()
{
	Matrix p, r, y, pos;

	p.MatrixRotateXDeg(this->pitch);
	r.MatrixRotateYDeg(this->roll);
	y.MatrixRotateZDeg(this->yaw);

	pos.MatrixTranslate(position);

	viewMatrix = p * r * y * pos;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::CalculateFrameInterval()
{
	static float frameTime = 0;
    float currentTime;

	currentTime = (float)GetTickCount() / 100;	

 	frameInterval = currentTime - frameTime;

	frameTime = currentTime;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
float Camera::GetFrameInterval()
{
	return this->frameInterval;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::SetCameraType(ECameraType type)
{
	this->cameraType = type;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
ECameraType Camera::GetCameraType()
{
	return this->cameraType;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::GetPosition(float pos[])
{
	pos[0] = this->position.X;
	pos[1] = this->position.Y;
	pos[2] = this->position.Z;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
float Camera::GetZoom()
{
	return this->zoom;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveForward(float units)
{
	if (units != 0)
	{
		position.X += viewMatrix.At(0, 2) * units;
		position.Y += viewMatrix.At(1, 2) * units;
		position.Z += viewMatrix.At(2, 2) * units;
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveRight(float units)
{
	if (units != 0)
	{
		position.X += viewMatrix.At(0, 0) * units;
		position.Y += viewMatrix.At(1, 0) * units;
		position.Z += viewMatrix.At(2, 0) * units;
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveUp(float units)
{
	if (units != 0)
	{
		position.X += viewMatrix.At(0, 1) * units;
		position.Y += viewMatrix.At(1, 1) * units;
		position.Z += viewMatrix.At(2, 1) * units;
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveX(float units)
{
	if (units != 0)
	{
		position.X += units;
		BuildViewmatrix();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveY(float units)
{
	if (units != 0)
	{
		position.Y += units;
		BuildViewmatrix();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::MoveZ(float units)
{
	if (units != 0)
	{
		position.Z += units;
		BuildViewmatrix();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::Zoom(float amount)
{
	if ((zoom + amount) <= 0.0f)
		return;
	zoom += amount;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::Pitch(float degrees)
{
	if (degrees != 0)
	{
		pitch += degrees;
		if (pitch > 90)
			pitch = 90;
		else if (pitch < -90)
			pitch = -90;
		BuildViewmatrix();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::Roll(float degrees)
{
	if (degrees != 0)
	{
		roll += degrees;
		BuildViewmatrix();
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Camera::Yaw(float degrees)
{
	if (degrees != 0)
	{
		yaw += degrees;
		BuildViewmatrix();
	}
}