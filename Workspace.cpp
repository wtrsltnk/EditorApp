// Workspace.cpp: implementation of the Workspace class.
//
//////////////////////////////////////////////////////////////////////

#include "Workspace.h"
#include <string>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Workspace::Workspace(char* name)
{
	Name(name);
	this->currentModel = 0;
}

Workspace::~Workspace()
{
	ClearModels();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Workspace::ClearModels()
{
	for (int i = 0; i < this->models.Size(); i++)
		delete this->models.Get(i);

	this->models.Clear();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
char* Workspace::Name()
{
	return this->name;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Workspace::Name(char* name)
{
	strcpy(this->name, name);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Workspace::AddModel(Model* model)
{
	if (this->models.Add(model) >= 0)
		this->currentModel = model;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool Workspace::RemoveModel(char* model)
{
	int i = GetModelIndex(model);
	
	if (i > -1)
		this->models.Remove(i);

	return false;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Model* Workspace::GetModel(char* model)
{
	int i = GetModelIndex(model);

	if (i > -1)
		return this->models[i];

	return 0;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int Workspace::GetModelIndex(char* model)
{
	if (model)
	{
		for (int i = 0; i < this->models.Size(); i++)
		{
			if (strcmp(this->models[i]->Name(), model) == 0)
			{
				return i;
			}
		}
	}
	return -1;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int Workspace::GetModelCount()
{
	return this->models.Size();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Model* Workspace::GetModel(int index)
{
	return this->models[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Workspace::SetCurrentModel(int index)
{
	if (index >= 0 && index < this->models.Size())
	{
		this->currentModel = this->models[index];
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Workspace::SetCurrentModel(char* model)
{
	if (int index = GetModelIndex(model) >= 0)
		this->currentModel = this->models[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
Model* Workspace::GetCurrentModel()
{
	return this->currentModel;
}