// Triangle.cpp: implementation of the Triangle class.
//
//////////////////////////////////////////////////////////////////////

#include "Triangle.h"
#include <windows.h>
#include <gl/gl.h>
#include <gl/glu.h>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Triangle::Triangle()
{
	this->id = -1;
	this->vertexIndexes[0] = 0;
	this->vertexIndexes[1] = 0;
	this->vertexIndexes[2] = 0;
	this->material = 0;
}

Triangle::~Triangle()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int Triangle::ID()
{
	return this->id;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Triangle::ID(int id)
{
	this->id = id;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Triangle::SetIndices(int v1, int v2, int v3)
{
	this->vertexIndexes[0] = v1;
	this->vertexIndexes[1] = v2;
	this->vertexIndexes[2] = v3;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Triangle::SetMaterial(int material)
{
	this->material = material;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Triangle::Begin()
{
	::glBegin(GL_TRIANGLE_FAN);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void Triangle::End()
{
	::glEnd();
}


